#!/usr/bin/env python3
"""
Test script for the Video Generator Service.

This script tests the video generation functionality with sample data.
"""

import asyncio
import json
from pathlib import Path
from video_builder import VideoBuilder, SlideScript

async def test_video_generation():
    """Test the video generation with sample slides and script."""
    
    # Create output directory
    output_dir = Path("output")
    output_dir.mkdir(exist_ok=True)
    
    # Sample data
    slides = [
        "https://via.placeholder.com/1280x720/2563eb/ffffff?text=Welcome+Slide",
        "https://via.placeholder.com/1280x720/059669/ffffff?text=Content+Slide",
        "https://via.placeholder.com/1280x720/dc2626/ffffff?text=Summary+Slide"
    ]
    
    script = [
        SlideScript(
            text="Welcome to our training course! Today we'll learn about video generation.",
            duration=5,
            slide=slides[0]
        ),
        SlideScript(
            text="This is where we cover the main content of our lesson.",
            duration=7,
            slide=slides[1]
        ),
        SlideScript(
            text="Thank you for watching! Don't forget to practice what you've learned.",
            duration=4,
            slide=slides[2]
        )
    ]
    
    try:
        # Initialize video builder
        builder = VideoBuilder(
            output_dir=output_dir,
            voice="female",
            include_subtitles=True,
            video_quality="720p"
        )
        
        print("🎬 Starting video generation...")
        
        # Generate video
        video_path, duration = await builder.generate_video(
            slides=slides,
            script=script,
            video_id="test_video"
        )
        
        print(f"✅ Video generated successfully!")
        print(f"📁 Output path: {video_path}")
        print(f"⏱️  Duration: {duration:.1f} seconds")
        print(f"🎯 Video ID: test_video")
        
        return video_path, duration
        
    except Exception as e:
        print(f"❌ Video generation failed: {str(e)}")
        raise

def test_api_endpoint():
    """Test the FastAPI endpoint."""
    import requests
    
    # Sample request data
    request_data = {
        "slides": [
            "https://via.placeholder.com/1280x720/2563eb/ffffff?text=Test+Slide"
        ],
        "script": [
            {
                "text": "This is a test video generated by our service.",
                "duration": 3,
                "slide": "https://via.placeholder.com/1280x720/2563eb/ffffff?text=Test+Slide"
            }
        ],
        "voice": "female",
        "include_subtitles": True,
        "video_quality": "720p"
    }
    
    try:
        # Make request to the API
        response = requests.post(
            "http://localhost:8000/generate-video",
            json=request_data,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print("✅ API test successful!")
            print(f"🎬 Video URL: {result['video_url']}")
            print(f"⏱️  Duration: {result['duration']} seconds")
            return result
        else:
            print(f"❌ API test failed: {response.status_code}")
            print(f"Response: {response.text}")
            return None
            
    except requests.exceptions.ConnectionError:
        print("❌ Could not connect to API. Make sure the server is running on localhost:8000")
        return None
    except Exception as e:
        print(f"❌ API test failed: {str(e)}")
        return None

if __name__ == "__main__":
    print("🧪 Testing Video Generator Service")
    print("=" * 50)
    
    # Test 1: Direct video builder
    print("\n1️⃣ Testing VideoBuilder directly...")
    try:
        video_path, duration = asyncio.run(test_video_generation())
        print("✅ Direct test passed!")
    except Exception as e:
        print(f"❌ Direct test failed: {str(e)}")
    
    # Test 2: API endpoint
    print("\n2️⃣ Testing API endpoint...")
    result = test_api_endpoint()
    
    if result:
        print("✅ API test passed!")
    else:
        print("❌ API test failed!")
    
    print("\n🎉 Testing complete!") 